{"version":3,"sources":["modules/TopPlayers/TopPlayers.module.scss","modules/Home/Home.module.scss","modules/Game/components/CheckedText/CheckedText.module.scss","App.module.scss","components/Page404/404.svg","modules/Home/logo.png","components/Page404/Page404.tsx","store/context.ts","components/PrivateRoute/PrivateRoute.tsx","mock/users.ts","store/session.ts","utils/request/request.ts","dataProvider/dataProvider.tsx","modules/Game/hooks/useTexts.ts","components/Timer/Timer.tsx","modules/Game/components/CheckedInput/CheckedInput.tsx","modules/Game/components/CheckedText/CheckedText.tsx","modules/Game/utils/textMap.ts","modules/Game/ActiveGame.tsx","modules/Game/Game.tsx","modules/TopPlayers/TopPlayers.tsx","components/ProfileDropdown/ProfileDropdown.tsx","modules/Dashboard/Dashboard.tsx","modules/Home/SignInModal/SignInModal.tsx","modules/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Page404","React","memo","src","imgSrc","style","height","alt","data-testid","displayName","createContext","currentUser","undefined","players","Component","component","rest","useContext","StoreContext","state","render","props","to","pathname","from","location","users","id","gender","nickname","password","getUser","user","sessionStorage","getItem","JSON","parse","defaultHeaders","createXhr","url","config","Promise","resolve","reject","request","XMLHttpRequest","open","method","toUpperCase","params","qs","stringify","addQueryPrefix","buildURL","headers","Object","keys","forEach","key","setRequestHeader","onreadystatechange","readyState","DONE","status","data","responseText","statusCode","error","onerror","send","createRequest","defaultConfig","reduce","acc","signout","removeItem","signin","mockUser","mockUsers","find","fetchUser","then","userDb","setItem","session","get","useTexts","activeTextIdx","useState","texts","setTexts","useEffect","length","type","paras","nextTexts","prevTexts","seconds","onEnd","onTick","secondsLeft","setSecondsLeft","onTickCb","useRef","current","intervalId","setInterval","prevSeconds","timeLeft","clearInterval","Label","Icon","name","width","display","expectedWord","onInputChange","onWordMatch","disabled","value","inputRef","focus","onChange","useCallback","_","newValue","updatedValue","Input","fluid","ref","placeholder","CheckedText","textMap","currentWordIndex","words","Array","Segment","inverted","map","word","wordIndex","isCurrent","isTyped","className","cx","styles","typed","typing","text","allWords","regex","str","fn","match","exec","allMatches","mapMatches","offset","slice","whitespace","letters","hasWhitespace","Boolean","Word","index","getWord","i","getWordOffset","values","wordsCount","onFinish","maxTime","wpm","setWpm","setWordIndex","progress","setProgress","currentInput","setCurrentInput","isGameStarted","setIsGameStarted","useMemo","utils","currentWord","onGameFinish","onWaitingTimerEnd","Header","elapsedSeconds","Math","floor","Progress","percent","indicating","color","Form","Field","setActiveTextIdx","inGame","setInGame","result","setResult","currentText","bestWpm","Number","put","updateUserDP","prevIdx","tryAgain","Button","onClick","Loader","active","inline","useUsersResult","setUsers","fetch","all","userResponses","filter","u","includes","isErrorResponse","filteredData","dataItem","sort","a","b","listHeader","Transition","Group","divided","relaxed","as","List","duration","size","verticalAlign","marginTop","Item","userItem","Image","avatar","process","wpmStatus","withRouter","history","setState","logout","prevState","push","Dropdown","direction","icon","marginLeft","circular","Menu","dividing","textAlign","padding","Responsive","maxWidth","onlyTablet","minWidth","Grid","stackable","Column","SignInModal","onClose","onSigninSuccess","inProgress","setInProgress","setNickName","hasError","setHasError","setPassword","changeNickName","changePassword","login","catch","isValid","Modal","dimmer","Content","image","Description","onSubmit","loading","Message","negative","Home","openSignModal","closeSignModal","path","isSignModalOpen","search","header","grow","logo","App","app","Provider","basename","exact","Dashboard","isLocalhost","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","document","getElementById","URL","href","origin","addEventListener","response","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.83e38e36.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userItem\":\"TopPlayers_userItem__3fnZi\",\"wpmStatus\":\"TopPlayers_wpmStatus__3b1rx\",\"listHeader\":\"TopPlayers_listHeader__jjc-W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Home_logo__12b51\",\"logo-spin\":\"Home_logo-spin__2Qo13\",\"grow\":\"Home_grow__1IOpb\",\"header\":\"Home_header__3iaKa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"typed\":\"CheckedText_typed__3CHZn\",\"typing\":\"CheckedText_typing__VSSvF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2ziFi\"};","module.exports = __webpack_public_path__ + \"static/media/404.b3f1c2e9.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.9d028f49.png\";","import React from 'react';\nimport imgSrc from './404.svg';\n\nconst Page404 = React.memo(() => (\n  <img\n    src={imgSrc}\n    style={{ height: '100vh' }}\n    alt=\"404\"\n    data-testid=\"404-img\"\n  />\n));\n\nPage404.displayName = 'Page404';\n\nexport default Page404;\n","import React from 'react';\n\nimport { User } from '../types';\n\nexport interface State {\n  currentUser: User | undefined;\n  players: User[];\n}\n\nexport type Context = [State, React.Dispatch<React.SetStateAction<State>>];\n\nexport const getInitialState = (): State => ({\n  currentUser: undefined,\n  players: [],\n});\n\nexport default React.createContext<Context>([\n  getInitialState(),\n  // tslint:disable-next-line\n  () => {},\n]);\n","import React, { useContext } from 'react';\nimport {\n  Redirect,\n  Route,\n  RouteComponentProps,\n  RouteProps,\n} from 'react-router-dom';\nimport StoreContext from '../../store/context';\n\ninterface Props extends RouteProps {\n  component: React.ComponentType<RouteComponentProps>;\n}\n\nconst PrivateRoute = ({ component: Component, ...rest }: Props) => {\n  const [state] = useContext(StoreContext);\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        state.currentUser ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/',\n              state: { from: props.location },\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nexport default React.memo(PrivateRoute);\n","import { User } from '../types';\n\nconst users: User[] = [\n  {\n    id: '19putj',\n    gender: 'male',\n    nickname: 'rudolf',\n    password: '123123',\n  },\n  {\n    id: 'mhy87',\n    gender: 'male',\n    nickname: 'bob',\n    password: '123123',\n  },\n  {\n    id: 't1pvr',\n    gender: 'female',\n    nickname: 'maria',\n    password: '123123',\n  },\n  {\n    id: '15jtl3',\n    gender: 'male',\n    nickname: 'john',\n    password: '123123',\n  },\n  {\n    id: '1092av',\n    gender: 'female',\n    nickname: 'oxy',\n    password: '123123',\n  },\n];\n\nexport default users;\n","import { User } from '../types';\n\nconst sessionStorageKey = 'TypeRacer2019';\n\nexport const setUser = ({ password, ...user }: User) => {\n  sessionStorage.setItem(sessionStorageKey, JSON.stringify(user));\n};\n\nexport const removeUser = () => sessionStorage.removeItem(sessionStorageKey);\n\nexport const getUser = (): User => {\n  const user = sessionStorage.getItem(sessionStorageKey);\n  return user ? JSON.parse(user) : user;\n};\n","import qs from 'qs';\n\ninterface RequestParams {\n  data?: object;\n  params?: object;\n  headers?: any;\n}\n\ninterface RequestConfig extends RequestParams {\n  method?: RequestMethod;\n}\n\ntype RequestFn = (\n  url: string,\n  config?: RequestParams | undefined,\n) => Promise<Response>;\n\ntype RequestMethod =\n  | 'delete'\n  | 'get'\n  | 'head'\n  | 'post'\n  | 'put'\n  | 'patch'\n  | 'options';\n\ntype RequestClient = { [method in RequestMethod]: RequestFn };\n\ninterface Response {\n  error?: string;\n  data?: any;\n  statusCode: number;\n}\n\nconst buildURL = (url: string, params?: object): string => {\n  return url + qs.stringify(params, { addQueryPrefix: true });\n};\n\nconst defaultHeaders = {\n  // 'content-type': 'application/json;charset=UTF-8',\n};\n\nconst createXhr: RequestFn = (\n  url: string,\n  config: RequestConfig | undefined = {},\n) =>\n  new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.open(\n      (config.method ? config.method : 'get').toUpperCase(),\n      buildURL(url, config.params),\n      true,\n    );\n\n    const headers = { ...defaultHeaders, ...config.headers };\n    Object.keys(headers).forEach(key => {\n      request.setRequestHeader(key, headers[key]);\n    });\n\n    request.onreadystatechange = () => {\n      if (request.readyState === XMLHttpRequest.DONE) {\n        if (request.status >= 200 && request.status < 400) {\n          try {\n            resolve({\n              data: request.responseText\n                ? JSON.parse(request.responseText)\n                : undefined,\n              statusCode: request.status,\n            });\n          } catch (error) {\n            reject({ error, statusCode: request.status });\n          }\n        } else if (request.status) {\n          try {\n            reject({\n              error: JSON.parse(request.responseText),\n              statusCode: request.status,\n            });\n          } catch (error) {\n            reject({ error, statusCode: request.status });\n          }\n        } else {\n          reject({\n            error: 'An error occurred while sending the request.',\n            statusCode: request.status,\n          });\n        }\n      }\n    };\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject({ error: 'Network error', statusCode: request.status });\n    };\n    request.send(JSON.stringify(config.data));\n  });\n\nconst createRequest = (\n  defaultConfig: RequestConfig | undefined = {},\n): RequestClient => {\n  const methods = [\n    'delete',\n    'get',\n    'head',\n    'options',\n    'post',\n    'put',\n    'patch',\n  ] as RequestMethod[];\n  return methods.reduce<RequestClient>(\n    (acc, method: RequestMethod) => {\n      acc[method] = (url: string, config: RequestParams | undefined = {}) =>\n        createXhr(url, {\n          ...defaultConfig,\n          ...config,\n          method,\n        } as RequestConfig);\n      return acc;\n    },\n    {} as RequestClient,\n  );\n};\n\nexport default createRequest();\n","import mockUsers from '../mock/users';\nimport * as session from '../store/session';\nimport { User } from '../types';\nimport { request } from '../utils';\n\ninterface ErrorResponse {\n  status: 404 | 500;\n  message: string;\n}\n\ntype UserResponse = ErrorResponse | User;\n\nexport const signout = (): Promise<undefined> =>\n  new Promise(resolve => {\n    session.removeUser();\n    resolve();\n  });\n\nexport const signin = (\n  user: Pick<User, 'nickname' | 'password'>,\n): Promise<User | undefined> => {\n  const mockUser = mockUsers.find(\n    ({ nickname, password }) =>\n      user.nickname === nickname && user.password === password,\n  );\n  return new Promise((resolve, reject) => {\n    mockUser\n      ? fetchUser(mockUser).then(userDb => {\n          if ('nickname' in userDb && userDb.nickname === mockUser.nickname) {\n            session.setUser(mockUser);\n            resolve(userDb);\n          } else {\n            reject();\n          }\n        })\n      : reject();\n  });\n};\n\nexport const fetchRandomText = (): Promise<string[]> =>\n  request\n    .get('https://baconipsum.com/api/', {\n      params: { type: 'meat-and-filler', paras: 1 },\n    })\n    .then(({ data }) => data);\n\nexport const fetchUser = (user: User): Promise<UserResponse> =>\n  request\n    .get(`https://api.myjson.com/bins/${user.id}`)\n    .then(({ data }) => data);\n\nexport const isErrorResponse = (user: UserResponse) => {\n  if ('status' in user) {\n    return [404, 500].includes(user.status);\n  }\n  return false;\n};\n\nexport const updateUser = (user: User) => {\n  request.put(`https://api.myjson.com/bins/${user.id}`, {\n    data: { ...user },\n    headers: {\n      'content-type': 'application/json;charset=UTF-8',\n    },\n  });\n};\n\nexport const fetchAllUsers = (): Promise<UserResponse[]> =>\n  Promise.all(mockUsers.map(fetchUser)).then(([...userResponses]) =>\n    userResponses.filter(u => !isErrorResponse(u)),\n  );\n","import { useEffect, useState } from 'react';\nimport { fetchRandomText } from '../../../dataProvider';\n\nconst useTexts = (activeTextIdx: number) => {\n  const [texts, setTexts] = useState<string[]>([]);\n  useEffect(() => {\n    if (!texts.length || activeTextIdx === texts.length - 1) {\n      fetchRandomText().then(nextTexts =>\n        setTexts(prevTexts => [...prevTexts, ...nextTexts]),\n      );\n    }\n  }, [activeTextIdx, texts]);\n  return [texts];\n};\n\nexport default useTexts;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Icon, Label } from 'semantic-ui-react';\n\ntype OnTick = (elapsedSeconds: number) => void;\ninterface Props {\n  seconds: number;\n  onEnd?: () => void;\n  onTick?: OnTick;\n}\n\nconst Timer = (props: Props) => {\n  const { seconds, onEnd, onTick } = props;\n  const [secondsLeft, setSecondsLeft] = useState(seconds);\n  const onTickCb = useRef<OnTick | undefined>(onTick);\n\n  useEffect(() => {\n    onTickCb.current = onTick;\n  }, [onTick]);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setSecondsLeft(prevSeconds => {\n        const timeLeft = --prevSeconds;\n        if (onTickCb.current) {\n          onTickCb.current(seconds - timeLeft);\n        }\n        if (timeLeft === 0) {\n          if (onEnd) {\n            onEnd();\n          }\n          clearInterval(intervalId);\n        }\n        return timeLeft;\n      });\n    }, 1000);\n    return () => clearInterval(intervalId);\n    //  eslint-disable-next-line\n  }, []);\n\n  return (\n    <Label data-testid=\"timer\">\n      <Icon name=\"clock\" />\n      <span style={{ width: '35px', display: 'inline-block' }}>\n        {secondsLeft}\n      </span>\n    </Label>\n  );\n};\n\nexport default React.memo(Timer);\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport { Input } from 'semantic-ui-react';\n\ninterface Props {\n  expectedWord: string;\n  disabled: boolean;\n  value: string;\n  onInputChange: (s: string) => void;\n  onWordMatch: () => void;\n}\n\nconst CheckedInput = (props: Props) => {\n  const { expectedWord, onInputChange, onWordMatch, disabled, value } = props;\n  const inputRef = useRef<Input>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [inputRef]);\n\n  const onChange = useCallback(\n    (_, { value: newValue }) => {\n      let updatedValue = newValue;\n      if (newValue === expectedWord) {\n        updatedValue = '';\n        onWordMatch();\n      }\n      onInputChange(updatedValue);\n    },\n    [expectedWord, onInputChange, onWordMatch],\n  );\n\n  return (\n    <Input\n      fluid\n      ref={inputRef}\n      value={value}\n      disabled={disabled}\n      onChange={onChange}\n      placeholder=\"Type the above text here when the race begins \"\n    />\n  );\n};\n\nexport default React.memo(CheckedInput);\n","import cx from 'classnames';\nimport React from 'react';\nimport { Segment } from 'semantic-ui-react';\n\nimport * as utils from '../../utils';\n\nimport styles from './CheckedText.module.scss';\n\ninterface Props {\n  textMap: ReturnType<typeof utils.textMap>;\n  currentWordIndex: number;\n}\n\nconst CheckedText = (props: Props) => {\n  const { textMap, currentWordIndex } = props;\n  const words = Array.from(textMap.words());\n\n  return (\n    <Segment inverted>\n      {words.map((word, wordIndex) => {\n        const isCurrent = wordIndex === currentWordIndex;\n        const isTyped = wordIndex < currentWordIndex;\n        return (\n          <span\n            key={wordIndex}\n            className={cx({\n              [styles.typed]: isTyped,\n              [styles.typing]: isCurrent,\n            })}\n          >\n            {word.text}\n          </span>\n        );\n      })}\n    </Segment>\n  );\n};\n\nexport default CheckedText;\n","function* allMatches(regex: RegExp, str: string) {\n  let match = regex.exec(str);\n\n  while (match) {\n    yield match;\n    match = regex.exec(str);\n  }\n}\n\nconst mapMatches = (\n  regex: RegExp,\n  str: string,\n  fn: (match: RegExpExecArray) => any,\n) => Array.from(allMatches(regex, str)).map(fn);\n\nconst Word = ({ offset, text }: { offset: number; text: string }) => {\n  // @ts-ignore\n  const [word, whitespace] = text.match(/([^\\s]+)(\\s|$)/).slice(1);\n  return {\n    letters: Array.from(text),\n    offset,\n    text,\n    whitespace,\n    word,\n    // tslint:disable-next-line: object-literal-sort-keys\n    hasWhitespace: () => Boolean(whitespace),\n  };\n};\n\nexport const textMap = (text: string) => {\n  const allWords = mapMatches(/[^\\s]+(\\s|$)/g, text, (match: RegExpExecArray) =>\n    Word({ text: match[0], offset: match.index }),\n  );\n\n  return {\n    text,\n    // tslint:disable-next-line: object-literal-sort-keys\n    getWord: (i: number) => allWords[i],\n    getWordOffset: (i: number) => allWords[i].offset,\n    words: () => allWords.values(),\n    wordsCount: () => allWords.length,\n  };\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Form, Header, Progress } from 'semantic-ui-react';\nimport Timer from '../../components/Timer';\nimport CheckedInput from './components/CheckedInput';\nimport CheckedText from './components/CheckedText';\nimport * as utils from './utils';\n\ninterface Props {\n  text: string;\n  maxTime: number; // seconds\n  onFinish?: (status: { wpm: number; progress: number }) => void;\n}\n\nconst ActiveGame = ({ text, onFinish, maxTime }: Props) => {\n  const [wpm, setWpm] = useState(0);\n  const [wordIndex, setWordIndex] = useState(0);\n  const [progress, setProgress] = useState(1);\n  const [currentInput, setCurrentInput] = useState('');\n  const [isGameStarted, setIsGameStarted] = useState<boolean>(false);\n  const textMap = useMemo(() => utils.textMap(text), [text]);\n  const currentWord = useMemo(() => textMap.getWord(wordIndex), [\n    textMap,\n    wordIndex,\n  ]);\n\n  const onGameFinish = useCallback(() => {\n    if (onFinish) {\n      onFinish({ wpm, progress });\n    }\n  }, [onFinish, wpm, progress]);\n\n  useEffect(() => {\n    if (progress === 100) {\n      onGameFinish();\n    }\n  }, [onGameFinish, progress]);\n\n  const onWaitingTimerEnd = useCallback(() => {\n    setIsGameStarted(true);\n  }, [setIsGameStarted]);\n\n  const onWordMatch = useCallback(() => {\n    if (wordIndex < textMap.wordsCount() - 1) {\n      setProgress(((wordIndex + 1) * 100) / textMap.wordsCount());\n      setWordIndex(wordIndex + 1);\n    } else {\n      setProgress(100);\n    }\n  }, [setWordIndex, setProgress, wordIndex, textMap]);\n\n  const onGameTimerTick = (elapsedSeconds: number) => {\n    setWpm(Math.floor((wordIndex * 60) / elapsedSeconds));\n  };\n\n  return (\n    <>\n      <Header inverted>\n        {isGameStarted ? (\n          <>\n            The race is on! Type the text below:{' '}\n            <Timer\n              key=\"game-timer\"\n              seconds={maxTime}\n              onEnd={onGameFinish}\n              onTick={onGameTimerTick}\n            />\n          </>\n        ) : (\n          <>\n            Get Ready to Race:{' '}\n            <Timer key=\"waiting-timer\" seconds={10} onEnd={onWaitingTimerEnd} />\n          </>\n        )}\n      </Header>\n      <div>WPM: {wpm}</div>\n      <Progress percent={progress} indicating color=\"olive\" />\n      <CheckedText textMap={textMap} currentWordIndex={wordIndex} />\n      <Form.Field>\n        <CheckedInput\n          expectedWord={currentWord.text}\n          disabled={!isGameStarted}\n          value={currentInput}\n          onInputChange={setCurrentInput}\n          onWordMatch={onWordMatch}\n        />\n      </Form.Field>\n    </>\n  );\n};\n\nexport default React.memo(ActiveGame);\n","import React, { useCallback, useContext, useState } from 'react';\nimport { Button, Label, Loader } from 'semantic-ui-react';\n\nimport { updateUser as updateUserDP } from '../../dataProvider';\nimport useTexts from './hooks/useTexts';\n\nimport StoreContext from '../../store/context';\nimport ActiveGame from './ActiveGame';\n\nconst Game = () => {\n  const [activeTextIdx, setActiveTextIdx] = useState(0);\n  const [{ currentUser }] = useContext(StoreContext);\n  const [inGame, setInGame] = useState(true);\n  const [result, setResult] = useState<{\n    wpm: number;\n    progress: number;\n  }>({ wpm: 0, progress: 0 });\n\n  const [texts] = useTexts(activeTextIdx);\n\n  const currentText = texts[activeTextIdx];\n\n  const onFinish = useCallback(\n    ({ wpm, progress }) => {\n      if (progress === 100 && currentUser) {\n        if (!currentUser.bestWpm || wpm > Number(currentUser.bestWpm)) {\n          updateUserDP({ ...currentUser, bestWpm: wpm });\n        }\n      }\n      setResult({ wpm, progress });\n      setActiveTextIdx(prevIdx => prevIdx + 1);\n      setInGame(false);\n    },\n    [currentUser],\n  );\n\n  const tryAgain = useCallback(() => setInGame(true), [setInGame]);\n\n  return (\n    <div>\n      {!texts.length ? (\n        <Loader inverted active inline=\"centered\">\n          Loading...\n        </Loader>\n      ) : inGame ? (\n        <ActiveGame text={currentText} onFinish={onFinish} maxTime={60 * 3} />\n      ) : (\n        <>\n          <div>\n            <Label>WPM: {result.wpm}</Label>\n            <Label>Progress: {result.progress} %</Label>\n          </div>\n          <br />\n          <br />\n          <Button onClick={tryAgain} color=\"blue\">\n            Play Again\n          </Button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default React.memo(Game);\n","import React, { useEffect, useState } from 'react';\nimport { Image, List, Transition } from 'semantic-ui-react';\nimport { fetchAllUsers } from '../../dataProvider';\nimport { User } from '../../types';\n\nimport styles from './TopPlayers.module.scss';\n\nconst useUsersResult = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  useEffect(() => {\n    const fetch = () =>\n      fetchAllUsers().then(data => {\n        const filteredData = data.filter(\n          dataItem => 'nickname' in dataItem,\n        ) as User[];\n        setUsers(\n          filteredData.sort((a, b) => {\n            if (!a.bestWpm) {\n              return 1;\n            } else if (!b.bestWpm) {\n              return -1;\n            }\n            return Number(b.bestWpm) - Number(a.bestWpm);\n          }),\n        );\n      });\n    fetch();\n    const intervalId = setInterval(fetch, 5000);\n    return () => clearInterval(intervalId);\n  }, []);\n  return [users];\n};\n\nconst TopPlayers = () => {\n  const [users] = useUsersResult();\n  return (\n    <>\n      <h3>Top Players</h3>\n      <div className={styles.listHeader}>wpm</div>\n      <Transition.Group\n        inverted\n        divided\n        relaxed\n        as={List}\n        duration={200}\n        size=\"large\"\n        verticalAlign=\"middle\"\n        style={{ marginTop: 0 }}\n      >\n        {users.map(user => (\n          <List.Item key={user.nickname}>\n            <div className={styles.userItem}>\n              <Image\n                avatar\n                src={process.env.PUBLIC_URL + `/${user.gender}.png`}\n              />\n              <span>{user.nickname}</span>\n              <span className={styles.wpmStatus}>\n                {user.bestWpm ? user.bestWpm : '-'}\n              </span>\n            </div>\n          </List.Item>\n        ))}\n      </Transition.Group>\n    </>\n  );\n};\n\nexport default React.memo(TopPlayers);\n","import React, { useCallback, useContext } from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { Dropdown, Image } from 'semantic-ui-react';\nimport { signout } from '../../dataProvider';\n\nimport StoreContext from '../../store/context';\n\nconst ProfileDropdown = ({ history }: RouteComponentProps) => {\n  const [state, setState] = useContext(StoreContext);\n\n  const logout = useCallback(\n    () =>\n      signout().then(() => {\n        setState(prevState => ({ ...prevState, currentUser: undefined }));\n        history.push('/');\n      }),\n    [history],\n  );\n\n  const gender = (state.currentUser && state.currentUser.gender) || 'male';\n  return (\n    <Dropdown\n      data-testid=\"profile-dropdown\"\n      direction=\"left\"\n      text={state.currentUser && state.currentUser.nickname}\n      icon={\n        <Image\n          style={{ display: 'inline-block', marginLeft: '5px' }}\n          circular\n          size=\"mini\"\n          src={process.env.PUBLIC_URL + `/${gender}.png`}\n        />\n      }\n    >\n      <Dropdown.Menu>\n        <Dropdown.Item icon=\"sign-out\" text=\"Sign out\" onClick={logout} />\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n};\n\nexport default withRouter(React.memo(ProfileDropdown));\n","import React from 'react';\nimport { Grid, Header, Responsive } from 'semantic-ui-react';\nimport Game from '../Game';\nimport TopPlayers from '../TopPlayers';\n\nimport ProfileDropdown from '../../components/ProfileDropdown';\n\nconst Dashboard = () => {\n  return (\n    <>\n      <Header inverted dividing textAlign=\"right\" style={{ padding: '5px' }}>\n        <ProfileDropdown />\n      </Header>\n      <Responsive maxWidth={Responsive.onlyTablet.minWidth}>\n        <div style={{ padding: '10px' }}>\n          <Game />\n          <br />\n          <TopPlayers />\n        </div>\n      </Responsive>\n      <Responsive minWidth={Responsive.onlyTablet.minWidth}>\n        <Grid stackable divided inverted style={{ padding: '0 20px' }}>\n          <Grid.Column width={4}>\n            <TopPlayers />\n          </Grid.Column>\n          <Grid.Column width={12}>\n            <Game />\n          </Grid.Column>\n        </Grid>\n      </Responsive>\n    </>\n  );\n};\n\nexport default React.memo(Dashboard);\n","import React, { useCallback, useContext, useState } from 'react';\nimport {\n  Button,\n  Form,\n  Header,\n  Icon,\n  Image,\n  Input,\n  Message,\n  Modal,\n} from 'semantic-ui-react';\n\nimport { signin } from '../../../dataProvider';\nimport StoreContext from '../../../store/context';\n\ninterface Props {\n  open: boolean;\n  onClose: () => void;\n  onSigninSuccess: () => void;\n}\n\nconst SignInModal = React.memo(({ onClose, open, onSigninSuccess }: Props) => {\n  const [, setState] = useContext(StoreContext);\n  const [inProgress, setInProgress] = useState(false);\n  const [nickname, setNickName] = useState('');\n  const [hasError, setHasError] = useState(false);\n  const [password, setPassword] = useState('');\n  const changeNickName = useCallback((_, { value }) => setNickName(value), []);\n  const changePassword = useCallback((_, { value }) => setPassword(value), []);\n  const login = useCallback(() => {\n    setInProgress(true);\n    signin({ nickname, password })\n      .then(user => {\n        setState(prevState => ({ ...prevState, currentUser: user }));\n        onSigninSuccess();\n      })\n      .catch(() => setHasError(true));\n  }, [nickname, password, onSigninSuccess, setState]);\n  const isValid = nickname && password;\n  return (\n    <Modal dimmer size=\"small\" open={open} onClose={onClose}>\n      <Modal.Content image>\n        <Image\n          circular\n          size=\"medium\"\n          src={process.env.PUBLIC_URL + '/male.png'}\n        />\n        <Modal.Description>\n          <Header>Sign in</Header>\n          <Form onSubmit={login}>\n            <Form.Field>\n              <Input\n                error={hasError}\n                placeholder=\"Nickname...\"\n                icon={<Icon name=\"user\" color=\"blue\" />}\n                value={nickname}\n                onChange={changeNickName}\n              />\n            </Form.Field>\n            <Form.Field>\n              <Input\n                error={hasError}\n                type=\"password\"\n                placeholder=\"Password...\"\n                icon={<Icon name=\"key\" color=\"blue\" />}\n                value={password}\n                onChange={changePassword}\n              />\n            </Form.Field>\n            <Button\n              fluid\n              type=\"submit\"\n              color=\"teal\"\n              disabled={inProgress || !isValid}\n              loading={inProgress}\n            >\n              Sign in\n            </Button>\n            {hasError && (\n              <Message negative>\n                <p>Try another nickname or password</p>\n              </Message>\n            )}\n          </Form>\n        </Modal.Description>\n      </Modal.Content>\n    </Modal>\n  );\n});\n\nSignInModal.displayName = 'SignInModal';\nexport default SignInModal;\n","import React, { useCallback, useContext, useMemo } from 'react';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button } from 'semantic-ui-react';\n\nimport StoreContext from '../../store/context';\nimport styles from './Home.module.scss';\nimport logo from './logo.png';\nimport SignInModal from './SignInModal';\n\nconst Home = (props: RouteComponentProps) => {\n  const { match, history, location } = props;\n  const [{ currentUser }] = useContext(StoreContext);\n  const openSignModal = useCallback(() => {\n    history.push('/?sign-in');\n  }, [history]);\n  const closeSignModal = useCallback(() => {\n    history.push(match.path);\n  }, [history, match]);\n  const isSignModalOpen = useMemo(() => location.search.includes('?sign-in'), [\n    location.search,\n  ]);\n  const onSigninSuccess = useCallback(() => {\n    history.push('/dashboard');\n  }, [history]);\n\n  return (\n    <>\n      <header className={styles.header}>\n        <div className={styles.grow}>\n          <img src={logo} className={styles.logo} alt=\"logo\" />\n        </div>\n      </header>\n      <main>\n        <h2>Type Racer Game</h2>\n        <div className=\"\">Increase your typing speed!</div>\n        <br />\n        {currentUser ? (\n          <Link to=\"/dashboard\">\n            <Button color=\"teal\" size=\"big\">\n              My Dashboard\n            </Button>\n          </Link>\n        ) : (\n          <>\n            <Button color=\"teal\" size=\"big\" onClick={openSignModal}>\n              Get Started &nbsp; &#x1F680;\n            </Button>\n            <SignInModal\n              open={isSignModalOpen}\n              onClose={closeSignModal}\n              onSigninSuccess={onSigninSuccess}\n            />\n          </>\n        )}\n      </main>\n    </>\n  );\n};\n\nexport default Home;\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport styles from './App.module.scss';\nimport Page404 from './components/Page404';\nimport PrivateRoute from './components/PrivateRoute';\nimport Dashboard from './modules/Dashboard';\nimport Home from './modules/Home';\n\n// import { fetchRandomText } from './dataProvider';\nimport StoreContext, { getInitialState, State } from './store/context';\nimport { getUser } from './store/session';\n\nconst App: React.FC = () => {\n  const [state, setState] = useState<State>({\n    ...getInitialState(),\n    currentUser: getUser(),\n  });\n  return (\n    <div className={styles.app}>\n      <StoreContext.Provider value={[state, setState]}>\n        <Router basename={process.env.REACT_APP_BASE_URL}>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <PrivateRoute path=\"/dashboard\" component={Dashboard} />\n            <Route component={Page404} />\n          </Switch>\n        </Router>\n      </StoreContext.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // tslint:disable-next-line\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // tslint:disable-next-line:no-console\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // tslint:disable-next-line:no-console\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // tslint:disable-next-line:no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // tslint:disable-next-line:no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}